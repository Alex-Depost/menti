services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network
    depends_on:
      - backend
      - frontend

  # Backend API service
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    volumes:
      - ./back:/app
      - ./back/static:/app/static
    networks:
      - app-network
    depends_on:
      - postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=7777
      - POSTGRES_DB=app
      - JWT_SECRET_KEY=your_super_secret_key_for_jwt_tokens
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/app

  # Frontend Next.js service
  frontend:
    build:
      context: ./asd
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - NEXT_PUBLIC_API_URL=http://nginx/api
    ports:
      - "3000:3000"

  # Database service
  postgres:
    image: postgres:16-alpine
    container_name: postgres-prod
    hostname: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=app
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "7777:5432"
    networks:
      - app-network

  # Database management tool
  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   restart: unless-stopped
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=admin@admin.com
  #     - PGADMIN_DEFAULT_PASSWORD=admin
  #     - PGADMIN_CONFIG_SERVER_MODE=False
  #   ports:
  #     - "5050:80"
  #   volumes:
  #     - pgadmin-data:/var/lib/pgadmin
  #   networks:
  #     - app-network
  #   depends_on:
  #     - postgres

  # # Monitoring tool
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: unless-stopped
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
  #   ports:
  #     - "3002:3000"
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   networks:
  #     - app-network
  #   depends_on:
  #     - postgres

volumes:
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local
  grafana-data:
    driver: local

networks:
  app-network:
    driver: bridge